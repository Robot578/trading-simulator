class TradingTeacher {
    constructor(tradingApp) {
        this.tradingApp = tradingApp;
        this.lessons = {
            basics: [
                "–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–æ–≤ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.",
                "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø–æ–∫—É–ø–∞–π –¥–µ—à–µ–≤–æ, –ø—Ä–æ–¥–∞–≤–∞–π –¥–æ—Ä–æ–≥–æ.",
                "–í—Å–µ–≥–¥–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å - –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π –≤—Å–µ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤."
            ],
            indicators: [
                "SMA (–ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥.",
                "EMA (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è) –±–æ–ª—å—à–µ –≤–µ—Å–∏–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ.",
                "–ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—à–µ SMA - —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π, –Ω–∏–∂–µ - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π."
            ],
            risk: [
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É–π –±–æ–ª–µ–µ 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ!",
                "–í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤.",
                "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1:2."
            ],
            psychology: [
                "–≠–º–æ—Ü–∏–∏ - –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞. –î–µ–π—Å—Ç–≤—É–π –ø–æ –ø–ª–∞–Ω—É.",
                "–ñ–∞–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Ö —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —É–±—ã—Ç–æ—á–Ω—ã–º —Å–¥–µ–ª–∫–∞–º.",
                "–í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π."
            ]
        };
    }

    showMessage(message, type = 'info') {
        const messageEl = document.getElementById('teacher-message');
        messageEl.textContent = message;
        messageEl.className = `teacher-message ${type}`;
    }

    giveHint() {
        const currentPrice = this.tradingApp.state.prices[this.tradingApp.state.currentAsset];
        const lastPrices = this.tradingApp.state.candles.slice(-5).map(c => c.close);
        const trend = this.calculateTrend(lastPrices);
        
        let hint = '';
        if (trend > 0.5) {
            hint = "üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥! –†–∞—Å—Å–º–æ—Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏.";
        } else if (trend < -0.5) {
            hint = "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥! –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω —Å –ø–æ–∫—É–ø–∫–∞–º–∏.";
        } else {
            hint = "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥. –ñ–¥–∏ —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.";
        }
        
        this.showMessage(hint, 'hint');
    }

    analyzeMarket() {
        const asset = this.tradingApp.state.currentAsset;
        const prices = this.tradingApp.state.candles.map(c => c.close);
        const volume = this.tradingApp.state.candles.map(c => c.volume);
        
        const analysis = this.performTechnicalAnalysis(prices, volume);
        this.showMessage(analysis, 'analysis');
    }

    performTechnicalAnalysis(prices, volumes) {
        const lastPrice = prices[prices.length - 1];
        const sma20 = this.calculateSMA(prices, 20);
        const volumeAvg = volumes.reduce((a, b) => a + b, 0) / volumes.length;
        const lastVolume = volumes[volumes.length - 1];

        let analysis = `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastPrice.toFixed(2)}\n`;
        analysis += `SMA(20): ${sma20.toFixed(2)}\n`;
        
        if (lastPrice > sma20) {
            analysis += "‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ SMA - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª\n";
        } else {
            analysis += "‚ùå –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª\n";
        }

        if (lastVolume > volumeAvg * 1.5) {
            analysis += "üìä –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç\n";
        }

        return analysis;
    }

    calculateSMA(data, period) {
        const slice = data.slice(-period);
        return slice.reduce((a, b) => a + b, 0) / slice.length;
    }

    calculateTrend(prices) {
        if (prices.length < 2) return 0;
        const changes = [];
        for (let i = 1; i < prices.length; i++) {
            changes.push((prices[i] - prices[i-1]) / prices[i-1]);
        }
        return changes.reduce((a, b) => a + b, 0) / changes.length;
    }

    startLesson(topic) {
        const lessonContent = this.lessons[topic];
        if (lessonContent) {
            let message = `üìö –£—Ä–æ–∫: ${this.getTopicName(topic)}\n\n`;
            lessonContent.forEach((point, index) => {
                message += `${index + 1}. ${point}\n`;
            });
            this.showMessage(message, 'lesson');
        }
    }

    getTopicName(topic) {
        const names = {
            basics: "–û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
            indicators: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
            risk: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏",
            psychology: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"
        };
        return names[topic] || topic;
    }
}

class TradingApp {
    constructor() {
        this.state = {
            balance: 100,
            portfolio: { BTC: 0, ETH: 0, SOL: 0 },
            prices: { BTC: 0, ETH: 0, SOL: 0 },
            history: [],
            chart: null,
            candleSeries: null,
            smaSeries: null,
            emaSeries: null,
            socket: null,
            candles: [],
            currentAsset: 'BTC',
            timeframe: '1h'
        };

        this.teacher = new TradingTeacher(this);
        this.tg = window.Telegram?.WebApp;
        
        this.init();
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ TradingApp –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    setupEventListeners() {
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
        document.getElementById('buy-btn').addEventListener('click', () => {
            const asset = document.getElementById('asset-select').value;
            this.executeTrade('BUY', asset);
        });
        
        document.getElementById('sell-btn').addEventListener('click', () => {
            const asset = document.getElementById('asset-select').value;
            this.executeTrade('SELL', asset);
        });

        // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è
        document.getElementById('teacher-btn').addEventListener('click', () => {
            this.toggleTeacherSection();
        });

        document.getElementById('teacher-hint').addEventListener('click', () => {
            this.teacher.giveHint();
        });

        document.getElementById('teacher-analysis').addEventListener('click', () => {
            this.teacher.analyzeMarket();
        });

        document.getElementById('teacher-lesson').addEventListener('click', () => {
            this.toggleLessonsList();
        });

        document.getElementById('start-lesson').addEventListener('click', () => {
            const topic = document.getElementById('lesson-select').value;
            this.teacher.startLesson(topic);
        });

        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    }

    toggleTeacherSection() {
        const section = document.getElementById('teacher-section');
        section.style.display = section.style.display === 'none' ? 'block' : 'none';
    }

    toggleLessonsList() {
        const lessons = document.getElementById('teacher-lessons');
        lessons.style.display = lessons.style.display === 'none' ? 'block' : 'none';
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ TradingApp ...
}

document.addEventListener('DOMContentLoaded', () => {
    new TradingApp();
});
