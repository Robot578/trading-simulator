// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chart;
let candleSeries;
let currentData = [];
let balance = 100.00;
let portfolio = {
    'BTC': 0,
    'ETH': 0, 
    'SOL': 0
};
let tradeHistory = [];
let activeOrders = [];
let currentAsset = 'BTC';
let currentTimeframe = '1h';
let notifications = [];
let achievements = [
    { id: 'first_trade', title: '–ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞', desc: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é', unlocked: false, icon: 'üéØ' },
    { id: 'profit_10', title: '–ü—Ä–æ—Ñ–∏—Ç +10%', desc: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –ø—Ä–∏–±—ã–ª–∏ +10%', unlocked: false, icon: 'üí∞' },
    { id: 'risk_manager', title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏', desc: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ 5 —Å–¥–µ–ª–∫–∞—Ö', unlocked: false, icon: 'üõ°Ô∏è' },
    { id: 'diversification', title: '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', desc: '–¢–æ—Ä–≥—É–π—Ç–µ –≤—Å–µ–º–∏ —Ç—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞–º–∏', unlocked: false, icon: 'üìä' }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    loadChartData();
    updateUI();
    checkAchievements();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadFromLocalStorage();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    initializeChart();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI();
    
    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ü–µ–Ω—ã
    startPriceSimulation();
}

// –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function startPriceSimulation() {
    setInterval(() => {
        if (currentData.length > 0) {
            const lastBar = currentData[currentData.length - 1];
            const newPrice = lastBar.close * (1 + (Math.random() - 0.5) * 0.002);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            const newBar = {
                time: Math.floor(Date.now() / 1000),
                open: lastBar.close,
                high: Math.max(lastBar.close, newPrice) * (1 + Math.random() * 0.001),
                low: Math.min(lastBar.close, newPrice) * (1 - Math.random() * 0.001),
                close: newPrice
            };
            
            candleSeries.update(newBar);
            currentData[currentData.length - 1] = newBar;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            updateCurrentPrice(newBar);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞
            checkOrders(newBar.close);
        }
    }, 5000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
function checkOrders(currentPrice) {
    for (let i = activeOrders.length - 1; i >= 0; i--) {
        const order = activeOrders[i];
        let shouldExecute = false;
        
        if (order.type === 'STOP' && order.price >= currentPrice) {
            shouldExecute = true;
        } else if (order.type === 'TAKE_PROFIT' && order.price <= currentPrice) {
            shouldExecute = true;
        }
        
        if (shouldExecute) {
            executeOrder(order, i);
        }
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
function executeOrder(order, index) {
    const tradeAmount = order.amount * order.price;
    
    if (order.type === 'STOP') {
        // –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
        if (portfolio[order.asset] >= order.amount) {
            portfolio[order.asset] -= order.amount;
            balance += tradeAmount;
            
            tradeHistory.push({
                type: 'sell',
                asset: order.asset,
                amount: order.amount,
                price: order.price,
                total: tradeAmount,
                timestamp: Date.now(),
                isOrder: true
            });
            
            addNotification(`–°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è ${order.asset} –ø–æ —Ü–µ–Ω–µ ${order.price.toFixed(2)}`);
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä
    activeOrders.splice(index, 1);
    updateOrdersList();
    saveToLocalStorage();
    updateUI();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function addNotification(message, type = 'info') {
    notifications.unshift({
        id: Date.now(),
        message,
        type,
        timestamp: Date.now(),
        read: false
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (notifications.length > 50) {
        notifications = notifications.slice(0, 50);
    }
    
    updateNotificationBadge();
    saveToLocalStorage();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function updateNotificationBadge() {
    const unreadCount = notifications.filter(n => !n.read).length;
    document.getElementById('notification-count').textContent = unreadCount;
    document.getElementById('notification-count').style.display = unreadCount > 0 ? 'block' : 'none';
}

// –ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
function quickTrade(type) {
    const amounts = [10, 25, 50, 100];
    const randomAmount = amounts[Math.floor(Math.random() * amounts.length)];
    document.getElementById('trade-amount').value = randomAmount;
    executeTrade(type);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(modalId) {
    document.getElementById(modalId).style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function hideModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
function confirmAction(message) {
    return new Promise((resolve) => {
        document.getElementById('confirmation-message').textContent = message;
        showModal('confirmation-modal');
        
        document.querySelector('.confirm-btn').onclick = () => {
            hideModal('confirmation-modal');
            resolve(true);
        };
        
        document.querySelector('.cancel-btn').onclick = () => {
            hideModal('confirmation-modal');
            resolve(false);
        };
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotifications() {
    const container = document.getElementById('notification-list');
    if (notifications.length === 0) {
        container.innerHTML = '<div class="notification-item">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = notifications.map(notif => `
        <div class="notification-item ${notif.type} ${notif.read ? 'read' : 'unread'}">
            <div class="notification-message">${notif.message}</div>
            <div class="notification-time">${new Date(notif.timestamp).toLocaleTimeString()}</div>
        </div>
    `).join('');
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    notifications.forEach(notif => notif.read = true);
    updateNotificationBadge();
    saveToLocalStorage();
    
    showModal('notification-modal');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    // –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞
    if (tradeHistory.length > 0 && !achievements[0].unlocked) {
        unlockAchievement(0);
    }
    
    // –ü—Ä–∏–±—ã–ª—å +10%
    const initialBalance = 100;
    const currentBalance = balance + Object.keys(portfolio).reduce((total, asset) => {
        const currentPrice = currentData.length > 0 ? currentData[currentData.length - 1].close : 0;
        return total + (portfolio[asset] * currentPrice * getAssetMultiplier(asset));
    }, 0);
    
    if (currentBalance >= initialBalance * 1.1 && !achievements[1].unlocked) {
        unlockAchievement(1);
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (5 –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç–æ–ø-–ª–æ—Å—Å)
    const stopOrdersCount = tradeHistory.filter(t => t.isOrder && t.type === 'sell').length;
    if (stopOrdersCount >= 5 && !achievements[2].unlocked) {
        unlockAchievement(2);
    }
    
    // –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ç–æ—Ä–≥–æ–≤–ª—è –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏)
    const tradedAssets = new Set(tradeHistory.map(t => t.asset));
    if (tradedAssets.size >= 3 && !achievements[3].unlocked) {
        unlockAchievement(3);
    }
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function unlockAchievement(index) {
    achievements[index].unlocked = true;
    addNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievements[index].title}`, 'achievement');
    updateAchievementsDisplay();
    saveToLocalStorage();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function updateAchievementsDisplay() {
    const container = document.getElementById('achievements-container');
    container.innerHTML = achievements.map(ach => `
        <div class="achievement-card ${ach.unlocked ? 'unlocked' : 'locked'}">
            <div class="achievement-icon">${ach.icon}</div>
            <div class="achievement-title">${ach.title}</div>
            <div class="achievement-desc">${ach.desc}</div>
            ${ach.unlocked ? '<div class="achievement-badge">‚úîÔ∏è</div>' : ''}
        </div>
    `).join('');
}

// –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤
function getAssetMultiplier(asset) {
    const multipliers = {
        'BTC': 1,
        'ETH': 0.05, // ETH –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 20 —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ BTC
        'SOL': 0.001 // SOL –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 1000 —Ä–∞–∑ –¥–µ—à–µ–≤–ª–µ BTC
    };
    return multipliers[asset] || 1;
}

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞
function analyzeMarket() {
    if (currentData.length < 20) return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞';
    
    const prices = currentData.slice(-20).map(d => d.close);
    const avgPrice = prices.reduce((a, b) => a + b) / prices.length;
    const currentPrice = prices[prices.length - 1];
    const trend = currentPrice > avgPrice ? '–≤–æ—Å—Ö–æ–¥—è—â–∏–π' : '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π';
    const volatility = (Math.max(...prices) - Math.min(...prices)) / avgPrice * 100;
    
    return `–¢—Ä–µ–Ω–¥: ${trend}, –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(2)}%, –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è executeTrade —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
async function executeTrade(type) {
    const amount = parseFloat(document.getElementById('trade-amount').value);
    const currentPrice = currentData[currentData.length - 1].close;
    
    if (isNaN(amount) || amount <= 0) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }
    
    const confirmed = await confirmAction(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${type === 'buy' ? '–∫—É–ø–∏—Ç—å' : '–ø—Ä–æ–¥–∞—Ç—å'} –Ω–∞ ${amount} USDT?`);
    if (!confirmed) return;
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
}

// –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ setupEventListeners
function setupEventListeners() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.getElementById('notifications-btn').addEventListener('click', showNotifications);
    
    // –ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    document.querySelectorAll('.quick-trade-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const amount = e.target.dataset.amount;
            document.getElementById('trade-amount').value = amount;
        });
    });
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', (e) => {
            hideModal(e.target.closest('.modal').id);
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            hideModal(e.target.id);
        }
    });
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.getElementById('bollinger-toggle').addEventListener('change', updateIndicators);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicators() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    if (document.getElementById('bollinger-toggle').checked) {
        addBollingerBands();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
function addBollingerBands() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è saveToLocalStorage
function saveToLocalStorage() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders,
        notifications,
        achievements,
        version: '1.1'
    };
    
    localStorage.setItem('tradelearn_data', JSON.stringify(data));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è loadFromLocalStorage
function loadFromLocalStorage() {
    const saved = localStorage.getItem('tradelearn_data');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            balance = data.balance || balance;
            portfolio = data.portfolio || portfolio;
            tradeHistory = data.tradeHistory || tradeHistory;
            activeOrders = data.activeOrders || activeOrders;
            notifications = data.notifications || notifications;
            achievements = data.achievements || achievements;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.quickTrade = quickTrade;
window.showNotifications = showNotifications;
