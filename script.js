// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let chart;
let candleSeries;
let volumeSeries;
let smaSeries;
let emaSeries;
let rsiSeries;
let currentData = [];
let balance = 100.00;
let portfolio = {
    'BTC': 0,
    'ETH': 0, 
    'SOL': 0,
    'ADA': 0,
    'DOT': 0
};
let tradeHistory = [];
let activeOrders = [];
let currentAsset = 'BTCUSDT';
let currentTimeframe = '1m';
let indicators = {
    sma: true,
    ema: false,
    rsi: false,
    volume: true
};
let wsConnection = null;
let realTimeData = null;

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—á–∏—Ç–µ–ª—è
const teacherKnowledge = {
    questions: {
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥': '–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö —Ü–µ–Ω—ã.',
        '–∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–µ–º–æ-—Å—á–µ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–æ–ø –ª–æ—Å—Å': '–°—Ç–æ–ø-–ª–æ—Å—Å - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - —ç—Ç–æ –æ—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏.',
        '–∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –∏–∑—É—á–∞–π—Ç–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫': '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫': '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ.',
        '–∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏': '–†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å.',
        '—á—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.',
        '–∫–∞–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å SMA, EMA, RSI –∏ MACD. –ö–∞–∂–¥—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã.'
    },

    lessons: {
        'basics': {
            title: 'üìñ –û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
            content: `–¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ buying low and selling high (–ø–æ–∫—É–ø–∞—Ç—å –¥–µ—à–µ–≤–æ, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ). 
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:
            ‚Ä¢ Long (–ª–æ–Ω–≥) - –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
            ‚Ä¢ Short (—à–æ—Ä—Ç) - –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
            ‚Ä¢ Spread (—Å–ø—Ä–µ–¥) - —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            ‚Ä¢ Volume (–æ–±—ä–µ–º) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
            
            –í–∞–∂–Ω–æ: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å!`
        },
        'candles': {
            title: 'üïØÔ∏è –°–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑',
            content: `–Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥.
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
            ‚Ä¢ –ë—ã—á—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∑–µ–ª–µ–Ω–∞—è)
            ‚Ä¢ –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ - –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Å–Ω–∞—è)
            ‚Ä¢ –î–æ–¥–∂–∏ - –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ, –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
            ‚Ä¢ –ú–æ–ª–æ—Ç - –±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            ‚Ä¢ –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π - –º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–µ—á–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–Ω–¥–∞!`
        },
        'indicators': {
            title: 'üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
            content: `–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.
            
            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
            ‚Ä¢ SMA (Simple Moving Average) - –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            ‚Ä¢ EMA (Exponential Moving Average) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            ‚Ä¢ RSI (Relative Strength Index) - –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã
            ‚Ä¢ MACD (Moving Average Convergence Divergence) - —Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø—É—Ç–∞–Ω–∏—Ü—É!`
        },
        'risk': {
            title: 'üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
            content: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É —Ç—Ä–µ–π–¥–∏–Ω–≥—É!
            
            –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
            ‚Ä¢ –†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            ‚Ä¢ –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å
            ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1:2
            ‚Ä¢ –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª
            ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —ç–º–æ—Ü–∏–∏ - –∂–∞–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Ö –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
            
            –ü–æ–º–Ω–∏—Ç–µ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª –≤–∞–∂–Ω–µ–µ, —á–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!`
        }
    },

    dictionary: {
        'sma': {
            title: 'SMA (Simple Moving Average)',
            description: '–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥.'
        },
        'ema': {
            title: 'EMA (Exponential Moving Average)',
            description: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è - –ø–æ—Ö–æ–∂–∞ –Ω–∞ SMA, –Ω–æ –ø—Ä–∏–¥–∞–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–Ω–∞–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–µ –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫ recent price changes.'
        },
        'rsi': {
            title: 'RSI (Relative Strength Index)',
            description: '–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã - –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä, –∏–∑–º–µ—Ä—è—é—â–∏–π —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π. –ó–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 70 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∏–∂–µ 30 - –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å.'
        },
        'stoploss': {
            title: 'Stop-Loss (–°—Ç–æ–ø-–õ–æ—Å—Å)',
            description: '–û—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–±—ã—Ç–∫–∞. –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—å.'
        },
        'takeprofit': {
            title: 'Take-Profit (–¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç)',
            description: '–û—Ä–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–±—ã–ª–∏. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å.'
        },
        'leverage': {
            title: '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (Leverage)',
            description: '–¢–æ—Ä–≥–æ–≤–ª—è —Å –∑–∞–µ–º–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –º–µ–Ω—å—à–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å, —Ç–∞–∫ –∏ —É–±—ã—Ç–∫–∏.'
        },
        'bullmarket': {
            title: '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ (Bull Market)',
            description: '–ü–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –∏ –æ–∂–∏–¥–∞—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω.'
        },
        'bearmarket': {
            title: '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (Bear Market)',
            description: '–ü–µ—Ä–∏–æ–¥ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –∫–æ–≥–¥–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ –∏ –æ–∂–∏–¥–∞—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω.'
        }
    },

    getSmartAnswer: function(question) {
        question = question.toLowerCase();
        
        if (question.includes('–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å') && question.includes('–∞–∫—Ç–∏–≤')) {
            return "–í—ã–±–∏—Ä–∞–π—Ç–µ –∞–∫—Ç–∏–≤—ã —Å —Ö–æ—Ä–æ—à–∏–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤, –∏–∑—É—á–∞–π—Ç–µ –∏—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.";
        }
        
        if (question.includes('–ª—É—á—à–µ–µ –≤—Ä–µ–º—è') && question.includes('—Ç–æ—Ä–≥')) {
            return "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–∞—Å—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –∞ —Ñ–æ–Ω–¥–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ - –≤ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂.";
        }
        
        if (question.includes('—Å–∫–æ–ª—å–∫–æ') && question.includes('–∑–∞—Ä–∞–±–∞—Ç')) {
            return "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Ä–∏—Å–∫–∞, —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –†–µ–∞–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è: 5-20% –≤ –º–µ—Å—è—Ü –ø—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ.";
        }
        
        if (question.includes('–Ω–æ–≤–∏—á–∫')) {
            return "–ù–æ–≤–∏—á–∫–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: 1) –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã 2) –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ 3) –ù–∞—á–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—É–º–º 4) –§–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏, –∞ –Ω–µ –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–µ.";
        }
        
        if (question.includes('–æ—à–∏–±–∫') && question.includes('–Ω–∞—á–∏–Ω–∞')) {
            return "–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤: 1) –¢–æ—Ä–≥–æ–≤–ª—è –±–µ–∑ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ 2) –ò–∑–ª–∏—à–Ω–∏–π —Ä–∏—Å–∫ 3) –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è 4) –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ 5) –ü–æ–≥–æ–Ω—è –∑–∞ —É–±—ã—Ç–∫–∞–º–∏.";
        }
        
        return "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —ç—Ç–æ—Ç topic –≤ —Ä–∞–∑–¥–µ–ª–µ '–£—Ä–æ–∫–∏' –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.";
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    loadHistoricalData();
    connectWebSocket();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    loadFromLocalStorage();
    initializeChart();
    
    const savedIndicators = localStorage.getItem('tradelearn_indicators');
    if (savedIndicators) {
        indicators = {...indicators, ...JSON.parse(savedIndicators)};
        updateIndicatorCheckboxes();
    }
    
    updateUI();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const section = e.currentTarget.dataset.section;
            showSection(section);
        });
    });
    
    document.querySelectorAll('.close-section').forEach(btn => {
        btn.addEventListener('click', () => {
            hideAllSections();
        });
    });
    
    document.getElementById('sidebar-toggle').addEventListener('click', toggleSidebar);
    
    document.getElementById('asset-select').addEventListener('change', (e) => {
        currentAsset = e.target.value;
        if (wsConnection) {
            wsConnection.close();
        }
        loadHistoricalData();
        connectWebSocket();
    });
    
    document.querySelectorAll('.timeframe-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            e.currentTarget.classList.add('active');
            currentTimeframe = e.currentTarget.dataset.tf;
            if (wsConnection) {
                wsConnection.close();
            }
            loadHistoricalData();
            connectWebSocket();
        });
    });
    
    document.getElementById('sma-toggle').addEventListener('change', (e) => {
        indicators.sma = e.target.checked;
        updateIndicators();
        saveIndicatorsToLocalStorage();
    });
    
    document.getElementById('ema-toggle').addEventListener('change', (e) => {
        indicators.ema = e.target.checked;
        updateIndicators();
        saveIndicatorsToLocalStorage();
    });
    
    document.getElementById('rsi-toggle').addEventListener('change', (e) => {
        indicators.rsi = e.target.checked;
        updateIndicators();
        saveIndicatorsToLocalStorage();
    });
    
    document.getElementById('volume-toggle').addEventListener('change', (e) => {
        indicators.volume = e.target.checked;
        updateIndicators();
        saveIndicatorsToLocalStorage();
    });
    
    document.getElementById('buy-btn').addEventListener('click', () => executeTrade('buy'));
    document.getElementById('sell-btn').addEventListener('click', () => executeTrade('sell'));
    document.getElementById('buy-max-btn').addEventListener('click', buyMax);
    
    document.getElementById('calculate-risk').addEventListener('click', calculateRisk);
    
    document.getElementById('teacher-hint').addEventListener('click', showTeacherHint);
    document.getElementById('teacher-analysis').addEventListener('click', showTeacherAnalysis);
    document.getElementById('teacher-lesson').addEventListener('click', showTeacherLesson);
    document.getElementById('teacher-dictionary-btn').addEventListener('click', toggleDictionary);
    document.getElementById('ask-question').addEventListener('click', answerQuestion);
    document.getElementById('teacher-question').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') answerQuestion();
    });
    document.getElementById('close-term').addEventListener('click', () => {
        document.getElementById('term-details').style.display = 'none';
    });
    
    document.querySelectorAll('.lesson-card').forEach(card => {
        card.addEventListener('click', (e) => {
            const lessonId = e.currentTarget.dataset.lesson;
            showLesson(lessonId);
        });
    });
    
    document.querySelectorAll('.dictionary-term').forEach(term => {
        term.addEventListener('click', (e) => {
            const termId = e.currentTarget.dataset.term;
            showTermDefinition(termId);
        });
    });
    
    document.getElementById('export-btn').addEventListener('click', exportData);
    document.getElementById('import-btn').addEventListener('click', () => document.getElementById('import-file').click());
    document.getElementById('import-file').addEventListener('change', importData);
    document.getElementById('reset-btn').addEventListener('click', resetData);
    
    document.getElementById('create-order-btn').addEventListener('click', createOrder);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
function initializeChart() {
    const chartContainer = document.getElementById('candleChart');
    
    chart = LightweightCharts.createChart(chartContainer, {
        layout: {
            background: { color: '#121212' },
            textColor: 'rgba(255, 255, 255, 0.9)',
        },
        grid: {
            vertLines: { color: 'rgba(42, 46, 57, 0.3)' },
            horzLines: { color: 'rgba(42, 46, 57, 0.3)' },
        },
        timeScale: {
            timeVisible: true,
            secondsVisible: false,
            borderColor: 'rgba(197, 203, 206, 0.4)',
        },
        crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
        },
        width: chartContainer.clientWidth,
        height: chartContainer.clientHeight,
    });
    
    candleSeries = chart.addCandlestickSeries({
        upColor: '#00c853',
        downColor: '#ff5252',
        borderDownColor: '#ff5252',
        borderUpColor: '#00c853',
        wickDownColor: '#ff5252',
        wickUpColor: '#00c853',
    });
    
    volumeSeries = chart.addHistogramSeries({
        color: '#26a69a',
        priceFormat: {
            type: 'volume',
        },
        priceScaleId: 'volume',
    });
    
    chart.priceScale('volume').applyOptions({
        scaleMargins: {
            top: 0.8,
            bottom: 0,
        },
    });
    
    smaSeries = chart.addLineSeries({
        color: '#2962ff',
        lineWidth: 2,
        title: 'SMA 20',
    });
    
    emaSeries = chart.addLineSeries({
        color: '#ff6d00',
        lineWidth: 2,
        title: 'EMA 12',
    });
    
    rsiSeries = chart.addLineSeries({
        color: '#9c27b0',
        lineWidth: 2,
        priceScaleId: 'rsi',
        title: 'RSI 14',
    });
    
    chart.priceScale('rsi').applyOptions({
        scaleMargins: {
            top: 0.7,
            bottom: 0.1,
        },
    });
    
    chart.subscribeCrosshairMove(param => {
        if (!param.point) return;
        
        const data = param.seriesData.get(candleSeries);
        if (data) {
            showTooltip(param.point.x, param.point.y, data);
        } else {
            hideTooltip();
        }
    });
    
    new ResizeObserver(entries => {
        if (entries.length === 0) return;
        const { width, height } = entries[0].contentRect;
        chart.applyOptions({ width, height });
    }).observe(chartContainer);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
async function loadHistoricalData() {
    showLoading();
    
    try {
        const symbol = currentAsset;
        const interval = currentTimeframe;
        const limit = 500;
        
        const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=${interval}&limit=${limit}`);
        const klines = await response.json();
        
        const candleData = klines.map(k => ({
            time: k[0] / 1000,
            open: parseFloat(k[1]),
            high: parseFloat(k[2]),
            low: parseFloat(k[3]),
            close: parseFloat(k[4]),
            volume: parseFloat(k[5])
        }));
        
        const volumeData = klines.map(k => ({
            time: k[0] / 1000,
            value: parseFloat(k[5]),
            color: parseFloat(k[4]) >= parseFloat(k[1]) ? 'rgba(0, 200, 83, 0.5)' : 'rgba(255, 82, 82, 0.5)'
        }));
        
        currentData = candleData;
        
        candleSeries.setData(candleData);
        volumeSeries.setData(volumeData);
        
        updateCurrentPrice(candleData[candleData.length - 1]);
        calculateIndicators(candleData);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance');
    } finally {
        hideLoading();
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function connectWebSocket() {
    if (wsConnection) {
        wsConnection.close();
    }
    
    const symbol = currentAsset.toLowerCase();
    const stream = `${symbol}@kline_${currentTimeframe}`;
    
    wsConnection = new WebSocket(`wss://stream.binance.com:9443/ws/${stream}`);
    
    wsConnection.onopen = () => {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    };
    
    wsConnection.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.k) {
            const kline = data.k;
            const newCandle = {
                time: kline.t / 1000,
                open: parseFloat(kline.o),
                high: parseFloat(kline.h),
                low: parseFloat(kline.l),
                close: parseFloat(kline.c),
                volume: parseFloat(kline.v)
            };
            
            const newVolume = {
                time: kline.t / 1000,
                value: parseFloat(kline.v),
                color: parseFloat(kline.c) >= parseFloat(kline.o) ? 'rgba(0, 200, 83, 0.5)' : 'rgba(255, 82, 82, 0.5)'
            };
            
            if (!kline.x) {
                candleSeries.update(newCandle);
                volumeSeries.update(newVolume);
            } else {
                currentData.push(newCandle);
                if (currentData.length > 500) {
                    currentData.shift();
                }
                
                candleSeries.update(newCandle);
                volumeSeries.update(newVolume);
                
                updateCurrentPrice(newCandle);
                calculateIndicators(currentData);
            }
            
            realTimeData = newCandle;
        }
    };
    
    wsConnection.onerror = (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    };
    
    wsConnection.onclose = () => {
        console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        setTimeout(() => connectWebSocket(), 5000);
    };
}

// –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function calculateIndicators(data) {
    if (data.length < 20) return;
    
    const smaData = calculateSMA(data, 20);
    smaSeries.setData(smaData);
    
    const emaData = calculateEMA(data, 12);
    emaSeries.setData(emaData);
    
    const rsiData = calculateRSI(data, 14);
    rsiSeries.setData(rsiData);
    
    updateIndicators();
}

// –†–∞—Å—á–µ—Ç SMA
function calculateSMA(data, period) {
    const result = [];
    for (let i = period - 1; i < data.length; i++) {
        let sum = 0;
        for (let j = 0; j < period; j++) {
            sum += data[i - j].close;
        }
        result.push({
            time: data[i].time,
            value: sum / period
        });
    }
    return result;
}

// –†–∞—Å—á–µ—Ç EMA
function calculateEMA(data, period) {
    const result = [];
    const k = 2 / (period + 1);
    let ema = data[0].close;
    
    for (let i = 0; i < data.length; i++) {
        if (i === 0) {
            ema = data[i].close;
        } else {
            ema = (data[i].close - ema) * k + ema;
        }
        result.push({
            time: data[i].time,
            value: ema
        });
    }
    return result;
}

// –†–∞—Å—á–µ—Ç RSI
function calculateRSI(data, period) {
    const result = [];
    let gains = 0;
    let losses = 0;
    
    for (let i = 1; i <= period; i++) {
        const change = data[i].close - data[i - 1].close;
        if (change >= 0) {
            gains += change;
        } else {
            losses += Math.abs(change);
        }
    }
    
    let avgGain = gains / period;
    let avgLoss = losses / period;
    
    for (let i = period + 1; i < data.length; i++) {
        const change = data[i].close - data[i - 1].close;
        
        avgGain = (avgGain * (period - 1) + Math.max(change, 0)) / period;
        avgLoss = (avgLoss * (period - 1) + Math.max(-change, 0)) / period;
        
        const rs = avgGain / (avgLoss === 0 ? 1 : avgLoss);
        const rsi = 100 - (100 / (1 + rs));
        
        result.push({
            time: data[i].time,
            value: rsi
        });
    }
    
    return result;
}

// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicators() {
    smaSeries.applyOptions({
        visible: indicators.sma
    });
    
    emaSeries.applyOptions({
        visible: indicators.ema
    });
    
    rsiSeries.applyOptions({
        visible: indicators.rsi
    });
    
    volumeSeries.applyOptions({
        visible: indicators.volume
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicatorCheckboxes() {
    document.getElementById('sma-toggle').checked = indicators.sma;
    document.getElementById('ema-toggle').checked = indicators.ema;
    document.getElementById('rsi-toggle').checked = indicators.rsi;
    document.getElementById('volume-toggle').checked = indicators.volume;
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function saveIndicatorsToLocalStorage() {
    localStorage.setItem('tradelearn_indicators', JSON.stringify(indicators));
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
function showSection(sectionId) {
    hideAllSections();
    const section = document.getElementById(`${sectionId}-section`);
    if (section) {
        section.style.display = 'block';
    }
}

// –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
function hideAllSections() {
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.display = 'none';
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
function toggleSidebar() {
    document.querySelector('.sidebar').classList.toggle('collapsed');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    document.getElementById('chartLoadingOverlay').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function hideLoading() {
    document.getElementById('chartLoadingOverlay').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    alert(message);
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
function updateCurrentPrice(bar) {
    const priceElement = document.getElementById('current-price');
    const changeElement = document.getElementById('price-change');
    const assetElement = document.getElementById('current-asset');
    
    const prevPrice = currentData.length > 1 ? currentData[currentData.length - 2].close : bar.open;
    const change = ((bar.close - prevPrice) / prevPrice) * 100;
    
    assetElement.textContent = currentAsset.replace('USDT', '/USDT');
    priceElement.textContent = bar.close.toFixed(2);
    changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
    changeElement.className = `price-change ${change >= 0 ? 'positive' : 'negative'}`;
    
    priceElement.classList.add('price-update');
    setTimeout(() => priceElement.classList.remove('price-update'), 1000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
function showTooltip(x, y, data) {
    const tooltip = document.getElementById('chart-tooltip');
    if (!tooltip) return;
    
    const change = ((data.close - data.open) / data.open) * 100;
    const changeClass = change >= 0 ? 'profit' : 'loss';
    
    tooltip.innerHTML = `
        <div class="tooltip-header">${new Date(data.time * 1000).toLocaleString()}</div>
        <div class="tooltip-content">
            <span class="tooltip-label">Open:</span>
            <span class="tooltip-value">${data.open.toFixed(2)}</span>
            
            <span class="tooltip-label">High:</span>
            <span class="tooltip-value">${data.high.toFixed(2)}</span>
            
            <span class="tooltip-label">Low:</span>
            <span class="tooltip-value">${data.low.toFixed(2)}</span>
            
            <span class="tooltip-label">Close:</span>
            <span class="tooltip-value">${data.close.toFixed(2)}</span>
            
            <span class="tooltip-label">Change:</span>
            <span class="tooltip-value ${changeClass}">${change >= 0 ? '+' : ''}${change.toFixed(2)}%</span>
        </div>
    `;
    
    const chartContainer = document.querySelector('.chart-container');
    const rect = chartContainer.getBoundingClientRect();
    
    tooltip.style.left = (x + rect.left) + 'px';
    tooltip.style.top = (y + rect.top - 100) + 'px';
    tooltip.style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
function hideTooltip() {
    const tooltip = document.getElementById('chart-tooltip');
    if (tooltip) {
        tooltip.style.display = 'none';
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
function executeTrade(type) {
    if (!realTimeData) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ');
        return;
    }
    
    const amount = parseFloat(document.getElementById('trade-amount').value);
    const currentPrice = realTimeData.close;
    const assetSymbol = currentAsset.replace('USDT', '');
    
    if (isNaN(amount) || amount <= 0) {
        showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }
    
    if (type === 'buy') {
        if (amount > balance) {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            return;
        }
        
        const assetAmount = amount / currentPrice;
        portfolio[assetSymbol] = (portfolio[assetSymbol] || 0) + assetAmount;
        balance -= amount;
        
        tradeHistory.push({
            type: 'buy',
            asset: assetSymbol,
            amount: assetAmount,
            price: currentPrice,
            total: amount,
            timestamp: Date.now()
        });
        
    } else if (type === 'sell') {
        const assetAmount = amount / currentPrice;
        
        if (assetAmount > (portfolio[assetSymbol] || 0)) {
            showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–∞');
            return;
        }
        
        portfolio[assetSymbol] = (portfolio[assetSymbol] || 0) - assetAmount;
        balance += amount;
        
        tradeHistory.push({
            type: 'sell',
            asset: assetSymbol,
            amount: assetAmount,
            price: currentPrice,
            total: amount,
            timestamp: Date.now()
        });
    }
    
    updateUI();
    saveToLocalStorage();
    showTeacherHint();
}

// –ö—É–ø–∏—Ç—å –Ω–∞ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
function buyMax() {
    if (!realTimeData) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ');
        return;
    }
    
    const currentPrice = realTimeData.close;
    const maxAmount = balance;
    document.getElementById('trade-amount').value = maxAmount.toFixed(2);
    executeTrade('buy');
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫
function calculateRisk() {
    const deposit = parseFloat(document.getElementById('risk-deposit').value);
    const riskPercent = parseFloat(document.getElementById('risk-percent').value);
    const entryPrice = parseFloat(document.getElementById('risk-entry').value);
    const stopPrice = parseFloat(document.getElementById('risk-stop').value);
    
    if (isNaN(deposit) || isNaN(riskPercent) || isNaN(entryPrice) || isNaN(stopPrice)) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    const riskAmount = deposit * (riskPercent / 100);
    const priceDifference = Math.abs(entryPrice - stopPrice);
    const volume = riskAmount / priceDifference;
    
    document.getElementById('risk-volume').textContent = volume.toFixed(6);
    document.getElementById('risk-amount').textContent = riskAmount.toFixed(2) + ' USDT';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —É—á–∏—Ç–µ–ª—è
function showTeacherHint() {
    const messages = [
        "–ü–æ–º–Ω–∏—Ç–µ –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞—Ö! –†–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏. –ò—â–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!",
        "–ù–µ –ø–æ–¥–¥–∞–≤–∞–π—Ç–µ—Å—å —ç–º–æ—Ü–∏—è–º - —Ç–æ—Ä–≥—É–π—Ç–µ –ø–æ –ø–ª–∞–Ω—É, –∞ –Ω–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.",
        "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤. –ù–µ –∫–ª–∞–¥–∏—Ç–µ –≤—Å–µ —è–π—Ü–∞ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É!",
        "–ò–∑—É—á–∞–π—Ç–µ –æ—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.",
        "–í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –∏ –æ—à–∏–±–∫–∏.",
        "–¢—Ä–µ–Ω–¥ - –≤–∞—à –¥—Ä—É–≥. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–æ–≤–∏—á–∫–∞–º.",
        "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è! –ò–∑—É—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏.",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –≤–∞–∂–Ω–µ–µ, —á–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!",
        "–û–±—É—á–∞–π—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ! –†—ã–Ω–∫–∏ –º–µ–Ω—è—é—Ç—Å—è, –∏ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è."
    ];
    
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    document.getElementById('teacher-message').textContent = randomMessage;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —É—á–∏—Ç–µ–ª—è
function showTeacherAnalysis() {
    if (!realTimeData) {
        document.getElementById('teacher-message').textContent = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞.";
        return;
    }
    
    const currentPrice = realTimeData.close;
    const analysis = `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${currentAsset.replace('USDT', '/USDT')}: ${currentPrice.toFixed(2)}. `;
    
    document.getElementById('teacher-message').textContent = analysis + "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.";
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ —É—á–∏—Ç–µ–ª—è
function showTeacherLesson() {
    const lessons = document.getElementById('teacher-lessons');
    const dictionary = document.getElementById('teacher-dictionary');
    const termDetails = document.getElementById('term-details');
    
    if (lessons.style.display === 'block') {
        lessons.style.display = 'none';
    } else {
        lessons.style.display = 'block';
        dictionary.style.display = 'none';
        termDetails.style.display = 'none';
        document.getElementById('teacher-message').textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:";
    }
}

// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
function answerQuestion() {
    const questionInput = document.getElementById('teacher-question');
    const question = questionInput.value.toLowerCase().trim();
    
    if (!question) return;
    
    let answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ: —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, —Ä–∏—Å–∫–∞—Ö, —Å—Ç–æ–ø-–ª–æ—Å—Å–µ –∏–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ.";
    
    for (const [key, value] of Object.entries(teacherKnowledge.questions)) {
        if (question.includes(key)) {
            answer = value;
            break;
        }
    }
    
    if (question.includes('–ø—Ä–∏–≤–µ—Ç') || question.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
        answer = "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É—á–∏—Ç–µ–ª—å –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!";
    }
    
    if (question.includes('—Å–ø–∞—Å–∏–±–æ') || question.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
        answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –£–¥–∞—á–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ! üöÄ";
    }
    
    if (answer === "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å...") {
        answer = teacherKnowledge.getSmartAnswer(question);
    }
    
    document.getElementById('teacher-message').textContent = answer;
    questionInput.value = '';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫
function showLesson(lessonId) {
    const lesson = teacherKnowledge.lessons[lessonId];
    if (lesson) {
        document.getElementById('teacher-message').innerHTML = `
            <strong>${lesson.title}</strong><br><br>
            ${lesson.content.replace(/\n/g, '<br>')}
        `;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
function showTermDefinition(termId) {
    const term = teacherKnowledge.dictionary[termId];
    if (term) {
        document.getElementById('term-title').textContent = term.title;
        document.getElementById('term-description').textContent = term.description;
        document.getElementById('term-details').style.display = 'block';
        document.getElementById('teacher-dictionary').style.display = 'none';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
function toggleDictionary() {
    const dictionary = document.getElementById('teacher-dictionary');
    const lessons = document.getElementById('teacher-lessons');
    const termDetails = document.getElementById('term-details');
    
    if (dictionary.style.display === 'block') {
        dictionary.style.display = 'none';
    } else {
        dictionary.style.display = 'block';
        lessons.style.display = 'none';
        termDetails.style.display = 'none';
    }
}

// –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
function createOrder() {
    if (!realTimeData) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ');
        return;
    }
    
    const orderType = document.getElementById('order-type').value;
    const orderPrice = parseFloat(document.getElementById('order-price').value);
    const orderAmount = parseFloat(document.getElementById('order-amount').value);
    
    if (isNaN(orderPrice) || isNaN(orderAmount) || orderPrice <= 0 || orderAmount <= 0) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return;
    }
    
    activeOrders.push({
        type: orderType,
        price: orderPrice,
        amount: orderAmount,
        asset: currentAsset.replace('USDT', ''),
        timestamp: Date.now()
    });
    
    updateOrdersList();
    saveToLocalStorage();
    
    document.getElementById('order-price').value = '';
    document.getElementById('order-amount').value = '';
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
function updateOrdersList() {
    const container = document.getElementById('orders-container');
    
    if (activeOrders.length === 0) {
        container.innerHTML = '<div class="empty-orders">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = activeOrders.map((order, index) => `
        <div class="order-item ${order.type.toLowerCase().replace('_', '-')}">
            <div class="order-info">
                <div class="order-type">${order.type === 'STOP' ? '–°—Ç–æ–ø-–ª–æ—Å—Å' : '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç'}</div>
                <div class="order-details">
                    ${order.asset} | –¶–µ–Ω–∞: ${order.price.toFixed(2)} | –û–±—ä–µ–º: ${order.amount.toFixed(6)}
                </div>
            </div>
            <div class="order-actions">
                <button class="order-cancel-btn" onclick="cancelOrder(${index})">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `).join('');
}

// –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
function cancelOrder(index) {
    activeOrders.splice(index, 1);
    updateOrdersList();
    saveToLocalStorage();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders,
        indicators
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = 'tradelearn-data.json';
    a.click();
    
    URL.revokeObjectURL(url);
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            
            balance = data.balance || balance;
            portfolio = data.portfolio || portfolio;
            tradeHistory = data.tradeHistory || tradeHistory;
            activeOrders = data.activeOrders || activeOrders;
            indicators = data.indicators || indicators;
            
            updateUI();
            updateIndicatorCheckboxes();
            updateIndicators();
            saveToLocalStorage();
            saveIndicatorsToLocalStorage();
            showError('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    };
    
    reader.readAsText(file);
    event.target.value = '';
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
function resetData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        balance = 100.00;
        portfolio = { 'BTC': 0, 'ETH': 0, 'SOL': 0, 'ADA': 0, 'DOT': 0 };
        tradeHistory = [];
        activeOrders = [];
        indicators = { sma: true, ema: false, rsi: false, volume: true };
        
        updateUI();
        updateIndicatorCheckboxes();
        updateIndicators();
        saveToLocalStorage();
        saveIndicatorsToLocalStorage();
        showError('–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('balance').textContent = balance.toFixed(2) + ' USDT';
    
    document.getElementById('btc-amount').textContent = portfolio.BTC.toFixed(6);
    document.getElementById('eth-amount').textContent = portfolio.ETH.toFixed(6);
    document.getElementById('sol-amount').textContent = portfolio.SOL.toFixed(6);
    document.getElementById('ada-amount').textContent = portfolio.ADA.toFixed(6);
    document.getElementById('dot-amount').textContent = portfolio.DOT.toFixed(6);
    
    const currentPrice = realTimeData ? realTimeData.close : 0;
    let totalValue = balance;
    Object.keys(portfolio).forEach(asset => {
        totalValue += portfolio[asset] * currentPrice;
    });
    
    document.getElementById('total-value').textContent = totalValue.toFixed(2) + ' USDT';
    
    updateHistoryList();
    updateOrdersList();
    updateStatistics();
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
function updateHistoryList() {
    const container = document.getElementById('history-items');
    
    if (tradeHistory.length === 0) {
        container.innerHTML = '<div class="empty-history">–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = tradeHistory.slice().reverse().map(trade => `
        <div class="history-item ${trade.type === 'buy' ? '' : 'loss'}">
            <div class="history-info">
                <div class="history-type">${trade.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'} ${trade.asset}</div>
                <div class="history-details">
                    ${new Date(trade.timestamp).toLocaleString()} | 
                    –¶–µ–Ω–∞: ${trade.price.toFixed(2)} | 
                    –û–±—ä–µ–º: ${trade.amount.toFixed(6)}
                </div>
            </div>
            <div class="history-amount ${trade.type === 'buy' ? 'loss' : 'profit'}">
                ${trade.type === 'buy' ? '-' : '+'}${trade.total.toFixed(2)} USDT
            </div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function updateStatistics() {
    const totalTrades = tradeHistory.length;
    const winningTrades = tradeHistory.filter(trade => trade.type === 'sell').length;
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100) : 0;
    
    document.getElementById('total-trades').querySelector('.stat-value').textContent = totalTrades;
    document.getElementById('win-rate').querySelector('.stat-value').textContent = winRate.toFixed(1) + '%';
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
function saveToLocalStorage() {
    const data = {
        balance,
        portfolio,
        tradeHistory,
        activeOrders
    };
    
    localStorage.setItem('tradelearn_data', JSON.stringify(data));
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
function loadFromLocalStorage() {
    const saved = localStorage.getItem('tradelearn_data');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            balance = data.balance || balance;
            portfolio = data.portfolio || portfolio;
            tradeHistory = data.tradeHistory || tradeHistory;
            activeOrders = data.activeOrders || activeOrders;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

window.cancelOrder = cancelOrder;
